{"ast":null,"code":"\n\n// import React, { useEffect, useState } from 'react';\n\n// interface Product {\n//   id: number;\n//   title: string;\n//   price: number;\n//   image: string;\n//   description: string;\n// }\n\n// interface CartItem extends Product {\n//   quantity: number;\n// }\n\n// export default function Cart() {\n//   const [cart, setCart] = useState<CartItem[]>([]);\n\n//   useEffect(() => {\n//     const storedCart = localStorage.getItem('cart');\n//     if (storedCart) {\n//       setCart(JSON.parse(storedCart)); \n\n//     }\n//   }, []);\n\n//   console.log(cart.length);\n\n//   const calculateTotalPrice = () => {\n//     return cart.reduce((total, item) => total + item.price * item.quantity, 0);\n//   };\n\n//   return (\n//     <div>\n//     <h2>Cart Page</h2>\n//     <h3>Total Price: ${calculateTotalPrice()}</h3>\n//     {Object.keys(cart).length > 0 ? (\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Price</th>\n//             <th>Quantity</th>\n//             <th>Image</th>\n//             <th>Total</th> \n//           </tr>\n//         </thead>\n//         <tbody>\n//         {Object.values(cart).map((item, index) => (\n//   <tr key={index}>\n//     <td>{item.title}</td>\n//     <td>${item.price.toFixed(2)}</td>\n//     <td>{item.quantity}</td>\n//     <td>\n//       <img src={item.image} alt={item.title} style={{ width: '100px' }} />\n//     </td>\n//     <td>$ {(item.price*item.quantity).toFixed(2)} </td>\n//   </tr>\n// ))}\n\n//         </tbody>\n//       </table>\n\n//    ) : (\n//       <p>Your cart is empty.</p>\n//     )}\n//      {/* <h1>Total price of products is {calculateTotalPrice}</h1> */}\n\n//   </div>\n\n//   );\n// }","map":{"version":3,"names":[],"sources":["D:/reactjs/ex_5/ex-1/src/component/Cart.tsx"],"sourcesContent":["\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n\r\n// interface Product {\r\n//   id: number;\r\n//   title: string;\r\n//   price: number;\r\n//   image: string;\r\n//   description: string;\r\n// }\r\n\r\n// interface CartItem extends Product {\r\n//   quantity: number;\r\n// }\r\n\r\n// export default function Cart() {\r\n//   const [cart, setCart] = useState<CartItem[]>([]);\r\n\r\n//   useEffect(() => {\r\n//     const storedCart = localStorage.getItem('cart');\r\n//     if (storedCart) {\r\n//       setCart(JSON.parse(storedCart)); \r\n\r\n//     }\r\n//   }, []);\r\n\r\n//   console.log(cart.length);\r\n  \r\n//   const calculateTotalPrice = () => {\r\n//     return cart.reduce((total, item) => total + item.price * item.quantity, 0);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//     <h2>Cart Page</h2>\r\n//     <h3>Total Price: ${calculateTotalPrice()}</h3>\r\n//     {Object.keys(cart).length > 0 ? (\r\n//       <table>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Title</th>\r\n//             <th>Price</th>\r\n//             <th>Quantity</th>\r\n//             <th>Image</th>\r\n//             <th>Total</th> \r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//         {Object.values(cart).map((item, index) => (\r\n//   <tr key={index}>\r\n//     <td>{item.title}</td>\r\n//     <td>${item.price.toFixed(2)}</td>\r\n//     <td>{item.quantity}</td>\r\n//     <td>\r\n//       <img src={item.image} alt={item.title} style={{ width: '100px' }} />\r\n//     </td>\r\n//     <td>$ {(item.price*item.quantity).toFixed(2)} </td>\r\n//   </tr>\r\n// ))}\r\n\r\n//         </tbody>\r\n//       </table>\r\n  \r\n//    ) : (\r\n//       <p>Your cart is empty.</p>\r\n//     )}\r\n//      {/* <h1>Total price of products is {calculateTotalPrice}</h1> */}\r\n     \r\n//   </div>\r\n \r\n  \r\n//   );\r\n// }\r\n"],"mappings":";;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}